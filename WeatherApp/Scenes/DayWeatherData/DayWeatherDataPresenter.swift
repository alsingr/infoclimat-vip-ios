//
//  DayWeatherDataPresenter.swift
//  WeatherApp
//
//  Created by Alvyn SILOU on 06/10/2018.
//  Copyright (c) 2018 Alvyn SILOU. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DayWeatherDataPresentationLogic
{
  func presentDaysWeatherData(response: DayWeatherData.FetchDaysWeatherData.Response)
}

class DayWeatherDataPresenter: DayWeatherDataPresentationLogic
{
  weak var viewController: DayWeatherDataDisplayLogic?
  
  // MARK: FetchDaysWeatherData
  
  func presentDaysWeatherData(response: DayWeatherData.FetchDaysWeatherData.Response)
  {
    var data = response.daysWeatherData.reduce(into: [DayWeatherData.FetchDaysWeatherData.ViewModel.DisplayedInterimStatement](), { result, value in
      result.append(DayWeatherData.FetchDaysWeatherData.ViewModel.DisplayedInterimStatement(interimStatement: value))
    })
    data.insert(DayWeatherData.FetchDaysWeatherData.ViewModel.DisplayedInterimStatement.header, at: 0)
    let viewModel = DayWeatherData.FetchDaysWeatherData.ViewModel(displayedInterimStatements: data)
    viewController?.displayDaysWeatherData(viewModel: viewModel)
  }
}


private extension Array where Element == DailyInterimStatement {
  func summarize() -> NSAttributedString {
    return NSMutableAttributedString()
  }
}

private extension DayWeatherData.FetchDaysWeatherData.ViewModel.DisplayedInterimStatement {
  
  init(interimStatement: DailyInterimStatement) {
    self.temperature = "\(interimStatement.temperature)".applyTemperatureStyle()
    self.time = "\(interimStatement.time.hour)".applyHourStyle()
    self.averageWind = "\(interimStatement.averageWind)".applyNumberStyle()
    self.moisture = "\(interimStatement.moisture)".applyNumberStyle()
    self.rain = "\(interimStatement.rain)".applyRainStyle()
    self.pressure = "\(interimStatement.pressure)".applyNumberStyle()
  }
  
  static var header: DayWeatherData.FetchDaysWeatherData.ViewModel.DisplayedInterimStatement {
    return DayWeatherData.FetchDaysWeatherData.ViewModel.DisplayedInterimStatement (time: "Heure".applyNumberStyle(),
                                                                                    temperature: "Température".applyNumberStyle(),
                                                                                    rain: "Pluie".applyNumberStyle(),
                                                                                    moisture: "Humidité".applyNumberStyle(),
                                                                                    averageWind: "Vents".applyNumberStyle(),
                                                                                    pressure: "Pression".applyNumberStyle())
  }
  
}

